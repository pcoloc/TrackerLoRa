import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class MdbTableScrollDirective {
    constructor(renderer, el) {
        this.renderer = renderer;
        this.el = el;
        this._scrollY = false;
        this._scrollX = false;
    }
    get scrollY() {
        return this._scrollY;
    }
    set scrollY(value) {
        this._scrollY = coerceBooleanProperty(value);
    }
    get maxHeight() {
        return this._maxHeight;
    }
    set maxHeight(value) {
        if (typeof value === 'number') {
            this._maxHeight = `${value}px`;
        }
        else {
            this._maxHeight = value;
        }
    }
    get scrollX() {
        return this._scrollX;
    }
    set scrollX(value) {
        this._scrollX = coerceBooleanProperty(value);
    }
    get maxWidth() {
        return this._maxWidth;
    }
    set maxWidth(value) {
        if (typeof value === 'number') {
            this._maxWidth = `${value}px`;
        }
        else {
            this._maxWidth = value;
        }
    }
    wrapTableWithVerticalScrollingWrapper(tableWrapper) {
        this.renderer.setStyle(tableWrapper, 'max-height', this.maxHeight);
        this.renderer.setStyle(tableWrapper, 'overflow-y', 'auto');
        this.renderer.setStyle(tableWrapper, 'display', 'block');
    }
    wrapTableWithHorizontalScrollingWrapper(tableWrapper) {
        this.renderer.setStyle(tableWrapper, 'max-width', this.maxWidth);
        this.renderer.setStyle(tableWrapper, 'overflow-x', 'auto');
        this.renderer.setStyle(tableWrapper, 'display', 'block');
    }
    wrapTableWithHorizontalAndVerticalScrollingWrapper(tableWrapper) {
        this.renderer.setStyle(tableWrapper, 'max-height', this.maxHeight);
        this.renderer.setStyle(tableWrapper, 'max-width', this.maxWidth);
        this.renderer.setStyle(tableWrapper, 'overflow-x', 'auto');
        this.renderer.setStyle(tableWrapper, 'display', 'block');
    }
    ngOnInit() {
        const parent = this.el.nativeElement.parentNode;
        const tableWrapper = this.renderer.createElement('div');
        if (this.scrollY && this.scrollX && this.maxHeight && this.maxWidth) {
            this.wrapTableWithHorizontalAndVerticalScrollingWrapper(tableWrapper);
        }
        if (this.scrollY && this.maxHeight) {
            this.wrapTableWithVerticalScrollingWrapper(tableWrapper);
        }
        if (this.scrollX && this.maxWidth) {
            this.wrapTableWithHorizontalScrollingWrapper(tableWrapper);
        }
        this.renderer.insertBefore(parent, tableWrapper, this.el.nativeElement);
        this.renderer.removeChild(parent, this.el.nativeElement);
        this.renderer.appendChild(tableWrapper, this.el.nativeElement);
    }
}
MdbTableScrollDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: MdbTableScrollDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
MdbTableScrollDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.6", type: MdbTableScrollDirective, selector: "[mdbTableScroll]", inputs: { scrollY: "scrollY", maxHeight: "maxHeight", scrollX: "scrollX", maxWidth: "maxWidth" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: MdbTableScrollDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[mdbTableScroll]',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { scrollY: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], scrollX: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,