{"version":3,"file":"ngx-lottie.mjs","sources":["../../../../libs/ngx-lottie/src/lib/symbols.ts","../../../../libs/ngx-lottie/src/lib/animation-loader.ts","../../../../libs/ngx-lottie/src/lib/base.directive.ts","../../../../libs/ngx-lottie/src/lib/lottie.directive.ts","../../../../libs/ngx-lottie/src/lib/lottie.component.ts","../../../../libs/ngx-lottie/src/lib/lottie.module.ts","../../../../libs/ngx-lottie/src/lib/cacheable-animation-loader/cacheable-animation-loader.ts","../../../../libs/ngx-lottie/src/lib/cacheable-animation-loader/lottie-cache.module.ts","../../../../libs/ngx-lottie/src/lib/server.ts","../../../../libs/ngx-lottie/src/lib/transfer-state.ts","../../../../libs/ngx-lottie/src/index.ts","../../../../libs/ngx-lottie/src/ngx-lottie.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface BMEnterFrameEvent {\n  currentTime: number;\n  duration: number;\n  totalTime: number;\n  type: 'enterFrame';\n}\n\nexport interface BMCompleteLoopEvent {\n  type: 'loopComplete';\n  loop: number;\n  playCount: number;\n  frameMult: number;\n}\n\nexport interface BMCompleteEvent {\n  type: 'complete';\n  duration: number;\n}\n\nexport interface BMSegmentStartEvent {\n  type: 'segmentStart';\n  firstFrame: number;\n  totalFrames: number;\n}\n\nexport interface BMDestroyEvent {\n  target: AnimationItem;\n  type: 'destroy';\n}\n\nexport interface BMRenderFrameErrorEvent {\n  type: 'renderFrameError';\n  nativeError: Error;\n  currentTime: number;\n}\n\nexport interface BMConfigErrorEvent {\n  type: 'configError';\n  nativeError: Error;\n}\n\nexport type LottieEvent =\n  | BMEnterFrameEvent\n  | BMCompleteLoopEvent\n  | BMCompleteEvent\n  | BMSegmentStartEvent\n  | BMDestroyEvent\n  | BMRenderFrameErrorEvent\n  | BMConfigErrorEvent\n  | void;\n\nexport type CamelizedAnimationEventName =\n  | 'complete'\n  | 'loopComplete'\n  | 'enterFrame'\n  | 'segmentStart'\n  | 'configReady'\n  | 'dataReady'\n  | 'domLoaded'\n  | 'destroy'\n  | 'error';\n\nexport type EventsMap = { [key in CamelizedAnimationEventName]: AnimationEventName };\n\nexport type AnimationFilename = string;\nexport type AnimationEventName = import('lottie-web').AnimationEventName;\nexport type AnimationItem = import('lottie-web').AnimationItem;\nexport type LottiePlayer = typeof import('lottie-web').default;\n\n/**\n * @example\n * import player from 'lottie-web';\n * const factory = () => player;\n */\ntype LottiePlayerFactory = () => LottiePlayer;\n\n/**\n * @example\n * const factory = () => import('lottie-web');\n */\ntype LottieLoader = () => Promise<typeof import('lottie-web')>;\n\nexport type LottiePlayerFactoryOrLoader = LottiePlayerFactory | LottieLoader;\n\nexport interface LottieOptions {\n  // Determines whether to load files on a separate worker. Note: workers cannot load\n  // animations from URLs (if `options.path` is defined).\n  useWebWorker?: boolean;\n  player: LottiePlayerFactoryOrLoader;\n}\n\nexport type RendererType = import('lottie-web').RendererType;\n\nexport type AnimationConfigWithData<R extends RendererType = 'svg'> =\n  import('lottie-web').AnimationConfigWithData<R>;\nexport type AnimationConfigWithPath<R extends RendererType = 'svg'> =\n  import('lottie-web').AnimationConfigWithPath<R>;\n\nexport type AnimationOptions<R extends RendererType = 'svg'> =\n  | Partial<AnimationConfigWithData<R>>\n  | Partial<AnimationConfigWithPath<R>>;\n\nexport const LOTTIE_OPTIONS = new InjectionToken<LottieOptions>('LottieOptions');\n","import { Injectable, NgZone, Inject } from '@angular/core';\n\nimport { Observable, from, of, animationFrameScheduler } from 'rxjs';\nimport { map, observeOn, shareReplay, tap } from 'rxjs/operators';\n\nimport {\n  LOTTIE_OPTIONS,\n  LottiePlayer,\n  LottieOptions,\n  AnimationItem,\n  AnimationOptions,\n  AnimationConfigWithData,\n  AnimationConfigWithPath,\n  LottiePlayerFactoryOrLoader,\n} from './symbols';\n\nfunction convertPlayerOrLoaderToObservable(\n  player: LottiePlayerFactoryOrLoader,\n  useWebWorker?: boolean,\n): Observable<LottiePlayer> {\n  const playerOrLoader = player();\n  const player$ =\n    playerOrLoader instanceof Promise\n      ? from(playerOrLoader).pipe(map(module => module.default || module))\n      : of(playerOrLoader);\n\n  return player$.pipe(\n    tap(player =>\n      (player as unknown as { useWebWorker: (useWebWorker?: boolean) => void }).useWebWorker(\n        useWebWorker,\n      ),\n    ),\n    shareReplay({ bufferSize: 1, refCount: true }),\n  );\n}\n\n@Injectable()\nexport class AnimationLoader {\n  protected player$ = convertPlayerOrLoaderToObservable(\n    this.options.player,\n    this.options.useWebWorker,\n  ).pipe(observeOn(animationFrameScheduler));\n\n  constructor(private ngZone: NgZone, @Inject(LOTTIE_OPTIONS) private options: LottieOptions) {}\n\n  loadAnimation(\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n  ): Observable<AnimationItem> {\n    return this.player$.pipe(map(player => this.createAnimationItem(player, options)));\n  }\n\n  resolveOptions(\n    options: AnimationOptions | null,\n    container: HTMLElement,\n  ): AnimationConfigWithData | AnimationConfigWithPath {\n    return Object.assign(\n      {\n        container,\n        renderer: 'svg',\n        loop: true,\n        autoplay: true,\n      },\n      options,\n    );\n  }\n\n  protected createAnimationItem(\n    player: LottiePlayer,\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n  ): AnimationItem {\n    return this.ngZone.runOutsideAngular(() => player.loadAnimation(options));\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  Inject,\n  PLATFORM_ID,\n  OnDestroy,\n  SimpleChanges,\n  NgZone,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { Subject, BehaviorSubject, Observable, defer } from 'rxjs';\nimport { filter, switchMap, takeUntil } from 'rxjs/operators';\n\nimport {\n  AnimationOptions,\n  BMCompleteEvent,\n  BMCompleteLoopEvent,\n  BMEnterFrameEvent,\n  BMSegmentStartEvent,\n  BMDestroyEvent,\n  BMRenderFrameErrorEvent,\n  BMConfigErrorEvent,\n  AnimationItem,\n  AnimationEventName,\n} from './symbols';\nimport { AnimationLoader } from './animation-loader';\n\n@Directive({ selector: '[lottie]' })\nexport class BaseDirective implements OnDestroy {\n  @Input() options: AnimationOptions | null = null;\n\n  @Input() containerClass: string | null = null;\n\n  @Input() styles: Partial<CSSStyleDeclaration> | null = null;\n\n  /**\n   * `animationCreated` is dispatched after calling `loadAnimation`.\n   */\n  @Output() animationCreated = this.getAnimationItem();\n\n  /**\n   * `complete` is dispatched after completing the last frame.\n   */\n  @Output() complete = this.awaitAnimationItemAndStartListening<BMCompleteEvent>('complete');\n\n  /**\n   * `loopComplete` is dispatched after completing the frame loop.\n   */\n  @Output() loopComplete =\n    this.awaitAnimationItemAndStartListening<BMCompleteLoopEvent>('loopComplete');\n\n  /**\n   * `enterFrame` is dispatched after entering the new frame.\n   */\n  @Output() enterFrame = this.awaitAnimationItemAndStartListening<BMEnterFrameEvent>('enterFrame');\n\n  /**\n   * `segmentStart` is dispatched when the new segment is adjusted.\n   */\n  @Output() segmentStart =\n    this.awaitAnimationItemAndStartListening<BMSegmentStartEvent>('segmentStart');\n\n  /**\n   * Original event name is `config_ready`. `config_ready` is dispatched\n   * after the needed renderer is configured.\n   */\n  @Output() configReady = this.awaitAnimationItemAndStartListening<void>('config_ready');\n\n  /**\n   * Original event name is `data_ready`. `data_ready` is dispatched\n   * when all parts of the animation have been loaded.\n   */\n  @Output() dataReady = this.awaitAnimationItemAndStartListening<void>('data_ready');\n\n  /**\n   * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched\n   * when elements have been added to the DOM.\n   */\n  @Output() domLoaded = this.awaitAnimationItemAndStartListening<void>('DOMLoaded');\n\n  /**\n   * `destroy` will be dispatched when the component gets destroyed,\n   * it's handy for releasing resources.\n   */\n  @Output() destroy = this.awaitAnimationItemAndStartListening<BMDestroyEvent>('destroy');\n\n  /**\n   * `error` will be dispatched if the Lottie player could not render\n   * some frame or parse config.\n   */\n  @Output() error = this.awaitAnimationItemAndStartListening<\n    BMRenderFrameErrorEvent | BMConfigErrorEvent\n  >('error');\n\n  private destroy$ = new Subject<void>();\n  private loadAnimation$ = new Subject<[SimpleChanges, HTMLElement]>();\n  private animationItem$ = new BehaviorSubject<AnimationItem | null>(null);\n\n  constructor(\n    private ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: string,\n    private animationLoader: AnimationLoader,\n  ) {\n    this.setupLoadAnimationListener();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroyAnimation();\n  }\n\n  protected loadAnimation(changes: SimpleChanges, container: HTMLElement): void {\n    this.loadAnimation$.next([changes, container]);\n  }\n\n  private getAnimationItem(): Observable<AnimationItem> {\n    return defer(() => this.animationItem$).pipe(\n      filter(\n        (animationItem: AnimationItem | null): animationItem is AnimationItem =>\n          animationItem !== null,\n      ),\n    );\n  }\n\n  private awaitAnimationItemAndStartListening<T>(name: AnimationEventName): Observable<T> {\n    return this.getAnimationItem().pipe(\n      switchMap(\n        animationItem =>\n          // `fromEvent` will try to call `removeEventListener` when `unsubscribe()` is invoked.\n          // The problem is that `ngOnDestroy()` is called before Angular unsubscribes from\n          // `@Output()` properties, thus `animationItem` will be `null` already, also `lottie-web`\n          // removes event listeners when calling `destroy()`.\n          new Observable<T>(observer => {\n            this.ngZone.runOutsideAngular(() => {\n              animationItem.addEventListener<T>(name, event => {\n                this.ngZone.runOutsideAngular(() => {\n                  observer.next(event);\n                });\n              });\n            });\n          }),\n      ),\n    );\n  }\n\n  private setupLoadAnimationListener(): void {\n    this.loadAnimation$\n      .pipe(\n        filter(([changes]) => isPlatformBrowser(this.platformId) && changes.options !== undefined),\n        switchMap(([changes, container]) => {\n          this.destroyAnimation();\n          return this.animationLoader.loadAnimation(\n            this.animationLoader.resolveOptions(changes.options.currentValue, container),\n          );\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(animationItem => {\n        this.animationItem$.next(animationItem);\n      });\n  }\n\n  private destroyAnimation(): void {\n    const animationItem = this.animationItem$.getValue();\n    // The `ng-lottie` component or the `lottie` directive can be destroyed\n    // before the `animationItem` is set, thus it will fail with\n    // `Cannot read property 'destroy' of null`.\n    // Potentially it can happen if the directive gets destroyed before change\n    // detection is run.\n    if (animationItem === null) {\n      return;\n    }\n\n    // `destroy()` will remove all events listeners.\n    animationItem.destroy();\n    this.animationItem$.next(null);\n  }\n}\n","import {\n  Directive,\n  Inject,\n  Self,\n  ElementRef,\n  PLATFORM_ID,\n  OnChanges,\n  SimpleChanges,\n  NgZone,\n} from '@angular/core';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\n\n@Directive({ selector: '[lottie]' })\nexport class LottieDirective extends BaseDirective implements OnChanges {\n  constructor(\n    ngZone: NgZone,\n    @Inject(PLATFORM_ID) platformId: string,\n    @Self() private host: ElementRef<HTMLElement>,\n    animationLoader: AnimationLoader,\n  ) {\n    super(ngZone, platformId, animationLoader);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.loadAnimation(changes, this.host.nativeElement);\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  Inject,\n  ElementRef,\n  ViewChild,\n  PLATFORM_ID,\n  OnChanges,\n  SimpleChanges,\n  NgZone,\n} from '@angular/core';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\n\n@Component({\n  selector: 'ng-lottie',\n  template: `\n    <div\n      #container\n      [style.width]=\"width || '100%'\"\n      [style.height]=\"height || '100%'\"\n      [ngStyle]=\"styles\"\n      [ngClass]=\"containerClass\"\n    ></div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LottieComponent extends BaseDirective implements OnChanges {\n  @Input() width: string | null = null;\n  @Input() height: string | null = null;\n\n  @ViewChild('container', { static: true }) container: ElementRef<HTMLElement> = null!;\n\n  constructor(\n    ngZone: NgZone,\n    @Inject(PLATFORM_ID) platformId: string,\n    animationLoader: AnimationLoader,\n  ) {\n    super(ngZone, platformId, animationLoader);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.loadAnimation(changes, this.container.nativeElement);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieDirective } from './lottie.directive';\nimport { LottieComponent } from './lottie.component';\nimport { LottieOptions, LOTTIE_OPTIONS } from './symbols';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BaseDirective, LottieDirective, LottieComponent],\n  exports: [BaseDirective, LottieDirective, LottieComponent],\n})\nexport class LottieModule {\n  static forRoot(options: LottieOptions): ModuleWithProviders<LottieModule> {\n    return {\n      ngModule: LottieModule,\n      providers: [\n        AnimationLoader,\n        {\n          provide: LOTTIE_OPTIONS,\n          useValue: options,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { AnimationLoader } from '../animation-loader';\nimport { AnimationItem, AnimationConfigWithData, AnimationConfigWithPath } from '../symbols';\n\n@Injectable()\nexport class CacheableAnimationLoader extends AnimationLoader implements OnDestroy {\n  private cache = new Map<string, string>();\n\n  ngOnDestroy(): void {\n    this.cache.clear();\n  }\n\n  loadAnimation(options: AnimationConfigWithData | AnimationConfigWithPath) {\n    return this.player$.pipe(\n      map(player => {\n        const animationItem = this.createAnimationItem(player, this.transformOptions(options));\n        this.awaitConfigAndCache(options, animationItem);\n        return animationItem;\n      }),\n    );\n  }\n\n  private awaitConfigAndCache(\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n    animationItem: AnimationItem,\n  ): void {\n    if (this.isAnimationConfigWithPath(options)) {\n      // Don't wait for the `config_ready` event if it has been cached previously.\n      if (this.cache.has(options.path!)) {\n        return;\n      }\n\n      animationItem.addEventListener('config_ready', () => {\n        // See the comments below on why we're storing the animation data as a string.\n        this.cache.set(options.path!, JSON.stringify(animationItem['animationData']));\n      });\n    }\n  }\n\n  private transformOptions(\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n  ): AnimationConfigWithData | AnimationConfigWithPath {\n    if (this.isAnimationConfigWithPath(options) && this.cache.has(options.path!)) {\n      return {\n        ...options,\n        path: undefined,\n        // Caretaker note: `lottie-web` cannot re-use the `animationData` object between animations, and we\n        // have to retrieve a new object each time an animation is created.\n        // https://github.com/airbnb/lottie-web#html\n        // See comments for the `animationData` property.\n        animationData: JSON.parse(this.cache.get(options.path!)!),\n      };\n    } else {\n      return options;\n    }\n  }\n\n  private isAnimationConfigWithPath(\n    options: Record<string, unknown>,\n  ): options is AnimationConfigWithPath {\n    return typeof options.path === 'string';\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { AnimationLoader } from '../animation-loader';\nimport { CacheableAnimationLoader } from './cacheable-animation-loader';\n\n@NgModule()\nexport class LottieCacheModule {\n  static forRoot(): ModuleWithProviders<LottieCacheModule> {\n    return {\n      ngModule: LottieCacheModule,\n      providers: [\n        {\n          provide: AnimationLoader,\n          useClass: CacheableAnimationLoader,\n        },\n      ],\n    };\n  }\n}\n","import { AnimationFilename } from './symbols';\n\nexport function transformAnimationFilenameToKey(animation: AnimationFilename): string {\n  const [animationName] = animation.split('.json');\n  return `animation-${animationName}`;\n}\n","import { Injectable } from '@angular/core';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { AnimationFilename } from './symbols';\nimport { transformAnimationFilenameToKey } from './server';\n\n@Injectable({ providedIn: 'root' })\nexport class LottieTransferState {\n  constructor(private transferState: TransferState) {}\n\n  get<T>(animation: AnimationFilename): T | null {\n    const animationKey = transformAnimationFilenameToKey(animation);\n    const stateKey = makeStateKey<T>(animationKey);\n    return this.transferState.get(stateKey, null);\n  }\n}\n","/**\n * The public api for consumers of ngx-lottie\n */\nexport { LottieModule } from './lib/lottie.module';\nexport { LottieCacheModule } from './lib/cacheable-animation-loader/lottie-cache.module';\n\nexport { AnimationLoader } from './lib/animation-loader';\n\nexport { BaseDirective } from './lib/base.directive';\nexport { LottieDirective } from './lib/lottie.directive';\nexport { LottieComponent } from './lib/lottie.component';\nexport { LottieTransferState } from './lib/transfer-state';\nexport {\n  BMEnterFrameEvent,\n  BMCompleteLoopEvent,\n  BMCompleteEvent,\n  BMSegmentStartEvent,\n  BMDestroyEvent,\n  BMRenderFrameErrorEvent,\n  BMConfigErrorEvent,\n  AnimationOptions,\n  AnimationFilename,\n} from './lib/symbols';\nexport { transformAnimationFilenameToKey } from './lib/server';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}